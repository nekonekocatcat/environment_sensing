package com.example.environment_sensing

import androidx.compose.animation.fadeIn
import androidx.compose.animation.scaleIn
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.grid.rememberLazyGridState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.SolidColor
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLayoutDirection
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.environment_sensing.data.AppDatabase
import com.example.environment_sensing.data.EnvironmentCollection
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CollectionScreen() {
    val context = LocalContext.current

    // ÂÆöÁæ©„Åã„ÇâÂÖ®Áí∞Â¢ÉÂêç„Çí‰ΩúÊàê
    val rareDefs = remember { RareEnvironmentChecker.environments.map { it.name }.toSet() }
    val normalDefs = remember { NormalEnvironmentChecker.environments.map { it.name }.toSet() }
    val allEnvironments = remember { (rareDefs + normalDefs).toList() }

    var collected by remember { mutableStateOf<List<EnvironmentCollection>>(emptyList()) }

    // DBË≥ºË™≠
    LaunchedEffect(Unit) {
        val dao = AppDatabase.getInstance(context).environmentCollectionDao()
        dao.getAll().collectLatest { result -> collected = result }
    }

    // NEW„Éï„É©„Ç∞„ÅØ5ÁßíÁµå„Å£„Å¶„Åã„ÇâËá™Âãï„ÅßÊ∂à„Åô
    LaunchedEffect(collected) {
        if (collected.any { it.isNew }) {
            delay(5_000)
            AppDatabase.getInstance(context).environmentCollectionDao().clearNewFlags()
        }
    }


    val grouped = remember(collected) { collected.groupBy { it.environmentName } }
    val items = remember(collected) {
        allEnvironments.map { name ->
            val list = grouped[name].orEmpty()
            CollectionUiItem(
                name = name,
                isRare = name in rareDefs,
                obtained = list.isNotEmpty(),
                isNew = list.any { it.isNew },
                count = list.size,
                lastTimestamp = list.maxOfOrNull { it.timestamp }
            )
        }.sortedWith(
            compareByDescending<CollectionUiItem> { it.isNew }
                .thenByDescending { it.obtained }
                .thenByDescending { it.isRare }
                .thenBy { it.name }
        )
    }

    var filter by remember { mutableStateOf(CollectionFilter.All) }
    val filtered = remember(items, filter) {
        when (filter) {
            CollectionFilter.All -> items
            CollectionFilter.Rare -> items.filter { it.isRare }
            CollectionFilter.Normal -> items.filter { !it.isRare }
            CollectionFilter.Unobtained -> items.filter { !it.obtained }
        }
    }

    var detail by remember { mutableStateOf<CollectionUiItem?>(null) }

    Scaffold(topBar = { SmallTopAppBar(title = { Text("Áí∞Â¢É„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥üìï") }) }) { inner ->
        val layoutDir = LocalLayoutDirection.current

        Column(
            modifier = Modifier
                .padding(
                    start = inner.calculateStartPadding(layoutDir),
                    top   = inner.calculateTopPadding(),
                    end   = inner.calculateEndPadding(layoutDir)
                )
                .consumeWindowInsets(inner)
                .fillMaxSize(),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            ProgressHeader(obtained = items.count { it.obtained }, total = items.size)
            FilterChips(current = filter, onChange = { filter = it })

            // „Çπ„ÇØ„É≠„Éº„É´Âà∂Âæ°
            val gridState = rememberLazyGridState()
            val lifecycleOwner = LocalLifecycleOwner.current
            val scope = rememberCoroutineScope()

            LazyVerticalGrid(
                state = gridState,
                columns = GridCells.Fixed(1),
                verticalArrangement = Arrangement.spacedBy(14.dp),
                horizontalArrangement = Arrangement.spacedBy(14.dp),
                contentPadding = PaddingValues(bottom = 8.dp),
                modifier = Modifier.fillMaxSize()
            ) {
                items(filtered, key = { it.name }) { it ->
                    CollectionCard(item = it, onClick = { detail = it })
                }
            }

            // „Éï„Ç£„É´„ÇøÂ§âÊõ¥ÊôÇ„ÅØÂÖàÈ†≠„Å∏
            LaunchedEffect(filter, items.size) {
                gridState.scrollToItem(0)
            }

            // ÁîªÈù¢Âæ©Â∏∞ÊôÇ„ÇÇÂÖàÈ†≠„Å∏
            DisposableEffect(lifecycleOwner, gridState) {
                val obs = androidx.lifecycle.LifecycleEventObserver { _, event ->
                    if (event == androidx.lifecycle.Lifecycle.Event.ON_RESUME) {
                        scope.launch { gridState.scrollToItem(0) }
                    }
                }
                lifecycleOwner.lifecycle.addObserver(obs)
                onDispose { lifecycleOwner.lifecycle.removeObserver(obs) }
            }
        }
    }

    if (detail != null) {
        ModalBottomSheet(onDismissRequest = { detail = null }) {
            DetailSheet(item = detail!!)
        }
    }
}

/* ================= „Éë„Éº„ÉÑ ================= */

@Composable
private fun ProgressHeader(obtained: Int, total: Int) {
    val ratio = if (total == 0) 0f else obtained.toFloat() / total
    ElevatedCard(Modifier.fillMaxWidth(), shape = RoundedCornerShape(16.dp)) {
        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
            Text("Âõ≥ÈëëÈÄ≤Êçó", style = MaterialTheme.typography.titleMedium)
            LinearProgressIndicator(
                progress = { ratio },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(8.dp)
                    .clip(RoundedCornerShape(999.dp))
            )
            Text("$obtained / $total ÂèñÂæó", color = MaterialTheme.colorScheme.onSurfaceVariant)
        }
    }
}

enum class CollectionFilter { All, Rare, Normal, Unobtained }

@Composable
private fun FilterChips(current: CollectionFilter, onChange: (CollectionFilter) -> Unit) {
    Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
        FilterChip("„Åô„Åπ„Å¶", current == CollectionFilter.All) { onChange(CollectionFilter.All) }
        FilterChip("„É¨„Ç¢", current == CollectionFilter.Rare) { onChange(CollectionFilter.Rare) }
        FilterChip("„Éé„Éº„Éû„É´", current == CollectionFilter.Normal) { onChange(CollectionFilter.Normal) }
        FilterChip("Êú™ÂèñÂæó", current == CollectionFilter.Unobtained) { onChange(CollectionFilter.Unobtained) }
    }
}

@Composable
private fun FilterChip(label: String, selected: Boolean, onClick: () -> Unit) {
    AssistChip(
        onClick = onClick,
        label = { Text(label) },
        leadingIcon = if (selected) {
            { Icon(Icons.Filled.Check, contentDescription = null, tint = MaterialTheme.colorScheme.primary) }
        } else null,
        border = if (selected) null else AssistChipDefaults.assistChipBorder(true),
        colors = AssistChipDefaults.assistChipColors(
            containerColor = if (selected) MaterialTheme.colorScheme.primary.copy(0.12f)
            else MaterialTheme.colorScheme.surface
        )
    )
}

data class CollectionUiItem(
    val name: String,
    val isRare: Boolean,
    val obtained: Boolean,
    val isNew: Boolean,
    val count: Int,
    val lastTimestamp: Long?
)

@Composable
private fun CollectionCard(item: CollectionUiItem, onClick: () -> Unit) {
    val tone = envColor(item.name)

    val obtainedBg = Brush.verticalGradient(
        listOf(tone.copy(alpha = 0.15f), tone.copy(alpha = 0.05f))
    )
    val lockedBg = SolidColor(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.15f))
    val borderStroke: BorderStroke? = if (item.obtained) BorderStroke(3.dp, tone) else null

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .heightIn(min = 140.dp)
            .clip(RoundedCornerShape(18.dp))
            .then(if (borderStroke != null) Modifier.border(borderStroke, RoundedCornerShape(18.dp)) else Modifier)
            .background(if (item.obtained) obtainedBg else lockedBg)
            .clickable { onClick() }
            .padding(16.dp)
    ) {
        Column(Modifier.fillMaxWidth(), verticalArrangement = Arrangement.spacedBy(10.dp)) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Box(
                    Modifier.size(14.dp)
                        .clip(RoundedCornerShape(7.dp))
                        .background(tone)
                )
                Spacer(Modifier.width(8.dp))
                if (item.isRare) { RareBadge(); Spacer(Modifier.width(8.dp)) }
                Text(
                    item.name,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = if (item.obtained) FontWeight.SemiBold else FontWeight.Medium,
                    color = if (item.obtained) MaterialTheme.colorScheme.onSurface
                    else MaterialTheme.colorScheme.onSurfaceVariant.copy(0.95f),
                    modifier = Modifier.weight(1f)
                )
            }

            if (item.obtained) {
                Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {
                    Text("ÂèñÂæóÂõûÊï∞: ${item.count}", fontSize = 13.sp, color = MaterialTheme.colorScheme.onSurfaceVariant)
                    item.lastTimestamp?.let {
                        Text("ÊúÄÁµÇÂèñÂæó: ${formatTs(it)}", fontSize = 12.sp, color = MaterialTheme.colorScheme.onSurfaceVariant)
                    }
                }
            } else {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(Icons.Filled.Lock, contentDescription = null,
                        tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(0.72f),
                        modifier = Modifier.size(18.dp))
                    Spacer(Modifier.width(6.dp))
                    Text("Êú™ÂèñÂæó", fontSize = 13.sp, color = MaterialTheme.colorScheme.onSurfaceVariant)
                }
            }
        }

        // NEW„Éê„ÉÉ„Ç∏
        NewBadge(visible = item.isNew, modifier = Modifier.align(Alignment.TopEnd))

        // ÈÄè„Åã„Åó
        val watermark = if (item.obtained) Icons.Filled.Check else Icons.Filled.Lock
        val tint = if (item.obtained) MaterialTheme.colorScheme.primary.copy(0.20f)
        else MaterialTheme.colorScheme.onSurface.copy(0.08f)
        Icon(
            imageVector = watermark, contentDescription = null, tint = tint,
            modifier = Modifier.align(Alignment.BottomEnd).size(if (item.obtained) 20.dp else 48.dp)
        )
    }
}

@Composable
private fun envColor(name: String): Color = when (name) {
    // „É¨„Ç¢
    "È´òÊ∏©√óÊÅØËã¶„Åó„Åï„É¨„Ç¢Áí∞Â¢É" -> Color(0xFFD32F2F)
    "‰ΩéÊ∞óÂúß√óÈ´òÊ∏©„É¨„Ç¢Áí∞Â¢É"   -> Color(0xFFB71C1C)
    "Êöó„ÅÑ√ó„ÅÜ„Çã„Åï„ÅÑ„É¨„Ç¢Áí∞Â¢É" -> Color(0xFF6A1B9A)
    "„ÅÜ„Çã„Åï„ÅÑ√óÊ±ö„ÅÑ„É¨„Ç¢Áí∞Â¢É" -> Color(0xFF8D6E63)
    "ÂçóÂõΩ„É™„Çæ„Éº„Éà„É¨„Ç¢Áí∞Â¢É"   -> Color(0xFFFFA000)
    "ÊòüÁ©∫„Ç≠„É£„É≥„Éó„É¨„Ç¢Áí∞Â¢É"   -> Color(0xFF1565C0)
    "ÂãâÂº∑„ÅØ„Åã„Å©„ÇãÈõÜ‰∏≠„É¨„Ç¢Áí∞Â¢É" -> Color(0xFF2E7D32)
    "„Ç´„É©„Ç™„Ç±Â§ß‰ºö„É¨„Ç¢Áí∞Â¢É"   -> Color(0xFFF06292)
    "ÁÑö„ÅçÁÅ´„É¨„Ç¢Áí∞Â¢É"         -> Color(0xFFFF7043)
    "ÈõªËªä„É©„ÉÉ„Ç∑„É•„É¨„Ç¢Áí∞Â¢É"   -> Color(0xFFFFA726)
    "Êò†ÁîªÈ§®„É¨„Ç¢Áí∞Â¢É"         -> Color(0xFF455A64)
    // „Éé„Éº„Éû„É´
    "Ë™øÁêÜ‰∏≠„Å£„ÅΩ„ÅÑÁí∞Â¢É"       -> Color(0xFFFF8A65)
    "„É™„Éì„É≥„Ç∞„Åæ„Å£„Åü„ÇäÁí∞Â¢É"   -> Color(0xFF26A69A)
    "‰∫§ÈÄöÈáèÂ§ö„ÇÅÁí∞Â¢É"         -> Color(0xFFFFEB3B)
    // fallback
    else -> when {
        listOf("È´òÊ∏©","ÁúüÂ§è","ÁÜ±").any { name.contains(it) } -> Color(0xFFD32F2F)
        listOf("Êöó","Â§ú","Êòü","Êò†Áîª").any { name.contains(it) } -> Color(0xFF3949AB)
        listOf("È®í","„ÅÜ„Çã", "„É©„ÉÉ„Ç∑„É•").any { name.contains(it) } -> Color(0xFFFFA000)
        listOf("ÈõÜ‰∏≠","Âø´ÈÅ©","Èùô").any { name.contains(it) } -> Color(0xFF2E7D32)
        listOf("‰∫§ÈÄö","ÈÅìË∑Ø","Ëªä").any { name.contains(it) } -> Color(0xFFFFEB3B)
        else -> MaterialTheme.colorScheme.outline
    }
}

@Composable
private fun NewBadge(visible: Boolean, modifier: Modifier = Modifier) {
    val infinite = rememberInfiniteTransition(label = "pulse")
    val pulseAlpha by infinite.animateFloat(
        initialValue = 0.6f, targetValue = 1f,
        animationSpec = infiniteRepeatable(
            animation = tween(900, easing = FastOutSlowInEasing),
            repeatMode = RepeatMode.Reverse
        ),
        label = "alpha"
    )

    androidx.compose.animation.AnimatedVisibility(
        visible = visible,
        enter = fadeIn() + scaleIn(),
        modifier = modifier
    ) {
        Box(
            modifier = Modifier
                .clip(RoundedCornerShape(999.dp))
                .background(MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = pulseAlpha))
                .padding(horizontal = 10.dp, vertical = 5.dp)
        ) {
            Text("NEW", fontWeight = FontWeight.Bold, fontSize = 11.sp,
                color = MaterialTheme.colorScheme.onTertiaryContainer)
        }
    }
}

@Composable
private fun RareBadge() {
    Box(
        modifier = Modifier
            .clip(RoundedCornerShape(7.dp))
            .background(MaterialTheme.colorScheme.primary.copy(0.18f))
            .padding(horizontal = 7.dp, vertical = 3.dp)
    ) {
        Text("RARE", color = MaterialTheme.colorScheme.primary,
            fontSize = 11.sp, fontWeight = FontWeight.Bold)
    }
}

@Composable
private fun DetailSheet(item: CollectionUiItem) {
    Column(
        Modifier.fillMaxWidth().padding(20.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            if (item.isRare) RareBadge()
            Spacer(Modifier.width(8.dp))
            Text(item.name, style = MaterialTheme.typography.titleLarge)
        }
        if (item.obtained) {
            Text("ÂèñÂæóÂõûÊï∞Ôºö${item.count}")
            item.lastTimestamp?.let {
                Text("ÊúÄÁµÇÂèñÂæóÔºö${formatTs(it)}", color = MaterialTheme.colorScheme.onSurfaceVariant)
            }
        } else {
            Text("„Åæ„Å†Âá∫‰ºö„Å£„Å¶„ÅÑ„Å™„ÅÑÁí∞Â¢É„ÄÇ", color = MaterialTheme.colorScheme.onSurfaceVariant)
        }

        Divider()

        HintAccordion(title = "„Éí„É≥„ÉàüëÄ") {
            Text(hintFor(item.name), color = MaterialTheme.colorScheme.onSurfaceVariant)
        }

        Spacer(Modifier.height(8.dp))
    }
}

@Composable
private fun HintAccordion(
    title: String,
    initiallyExpanded: Boolean = false,
    content: @Composable () -> Unit
) {
    var expanded by rememberSaveable { mutableStateOf(initiallyExpanded) }
    val rotation by animateFloatAsState(
        targetValue = if (expanded) 180f else 0f,
        animationSpec = tween(durationMillis = 200, easing = FastOutSlowInEasing),
        label = "expandRotation"
    )

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(12.dp))
            .background(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.35f))
            .padding(12.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth().clickable { expanded = !expanded },
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(title, style = MaterialTheme.typography.titleMedium, modifier = Modifier.weight(1f))
            Icon(
                imageVector = if (expanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                contentDescription = null,
                modifier = Modifier.rotate(rotation)
            )
        }

        androidx.compose.animation.AnimatedVisibility(visible = expanded) {
            Column(Modifier.padding(top = 8.dp)) { content() }
        }
    }
}

/* =============== „Éí„É≥„Éà =============== */

private fun hintFor(name: String): String = when (name) {
    // ===== „É¨„Ç¢Áí∞Â¢É =====
    "‰ΩéÊ∞óÂúß√óÈ´òÊ∏©„É¨„Ç¢Áí∞Â¢É" -> "Á©∫Ê∞ó„ÅåÈáç„Åü„Åè„Å¶„É†„ÉØ„ÉÉ„Å®Êöë„ÅÑÊó•„ÄÇÈõ®„ÅÆÊ∞óÈÖç„ÇÑÂè∞È¢®Ââç„Åø„Åü„ÅÑ„Å™‚Äú„Å†„Çã„Äú„ÅÑ‚ÄùÊÑü„Åò„ÅåËøë„ÅÑ„ÇàÔºÅüåßÔ∏èüå°Ô∏èü•µ"
    "Êöó„ÅÑ√ó„ÅÜ„Çã„Åï„ÅÑ„É¨„Ç¢Áí∞Â¢É" -> "Êöó„ÅÑ„ÅÆ„Å´Èü≥„Å†„Åë„Éâ„É≥ÔºÅ„É©„Ç§„Éñ„Éè„Ç¶„Çπ„ÇÑ„ÇØ„É©„Éñ„ÅÆ„Éï„É≠„Ç¢„ÄÅ„Ç≤„Éº„É†„Çª„É≥„Çø„Éº„ÅÆÂ••„ÅÆ„Çà„ÅÜ„Å™Èõ∞Âõ≤Ê∞ó„ÄÇüï∂Ô∏èüîäüé∂"
    "„ÅÜ„Çã„Åï„ÅÑ√óÊ±ö„ÅÑ„É¨„Ç¢Áí∞Â¢É" -> "Â∑•‰∫ã„ÅÆ„Ç¨„Ç¨„Ç¨„ÇÑËªä„ÅÆ„Ç¥„Éº„ÉÉ„ÅåÈüø„ÅÑ„Å¶„ÄÅÁ©∫Ê∞ó„ÅåÁ≤â„Å£„ÅΩ„ÅÑÔºèÊéíÊ∞ó„Å£„ÅΩ„ÅÑ„Å®„Åç„ÄÇüèóÔ∏èüööüò∑"
    "È´òÊ∏©√óÊÅØËã¶„Åó„Åï„É¨„Ç¢Áí∞Â¢É" -> "Êöë„ÅÑÔºãÊèõÊ∞óÂº±„ÇÅ„ÅßÊÅØ„Åå„Åì„ÇÇ„ÇãÊÑü„Åò„ÄÇ‰∫∫„ÅåÂ§ö„ÅÑ‰ºöË≠∞ÂÆ§„ÇÑÁúüÂ§è„ÅÆÁ™ì„ÇíÈñâ„ÇÅÂàá„Å£„ÅüÈÉ®Â±ã„ÅåËøë„ÅÑ„Åã„ÇÇ„Å£ü•µü´Åüö™"
    "ÂçóÂõΩ„É™„Çæ„Éº„Éà„É¨„Ç¢Áí∞Â¢É" -> "Êòé„Çã„Åè„Å¶„ÅÇ„Å£„Åü„Åã„ÅÑÂ†¥ÊâÄ„Åß„ÄÅ‰∫∫„ÅÆÂ£∞„ÇÑÈü≥Ê•Ω„Åå„ÇÜ„Çã„Äú„ÅèÊµÅ„Çå„Å¶„Çã„ÄÇ„Éï„Éº„Éâ„Ç≥„Éº„Éà„ÇÑÊµ∑Ê≤ø„ÅÑ„ÅÆ„ÉÜ„É©„Çπ„Å£„ÅΩ„ÅÑ„ÄÇüå∫üèñÔ∏èüé∂"
    "ÊòüÁ©∫„Ç≠„É£„É≥„Éó„É¨„Ç¢Áí∞Â¢É" -> "Â§ñ„Åå„Åó„Çì„Å®Èùô„Åã„ÅßÊöó„ÅÑÂ§ú„ÄÇË°óÁÅØ„ÅåÂ∞ë„Å™„ÅÑÂÖ¨Âúí„ÇÑ„Ç≠„É£„É≥„ÉóÂ†¥„ÅßÁ©∫„ÇíË¶ã‰∏ä„Åí„Å¶„ÇãÊÑü„Åò„ÄÇ‚ú®üèïÔ∏èüåå"
    "ÂãâÂº∑„ÅØ„Åã„Å©„ÇãÈõÜ‰∏≠„É¨„Ç¢Áí∞Â¢É" -> "Êòé„Çã„Åï„ÅØ„Åª„Å©„Çà„Åè„ÄÅÈõëÈü≥„ÅØÂ∞è„Åï„ÇÅ„ÄÇÂõ≥Êõ∏È§®„ÇÑËá™ÁøíÂÆ§„Åø„Åü„ÅÑ„Å´ËêΩ„Å°ÁùÄ„Åè„Åë„Å©„Éî„É™„ÉÉ„Å®ÈõÜ‰∏≠„Åß„Åç„ÇãÁ©∫Ê∞ó„ÄÇüìöüí°üîá"
    "„Ç´„É©„Ç™„Ç±Â§ß‰ºö„É¨„Ç¢Áí∞Â¢É" -> "Â∞è„Åï„ÇÅ„ÅÆÈÉ®Â±ã„Åß„ÉØ„Ç§„ÉØ„Ç§Ê≠å„Å£„Å¶Áõõ„Çä‰∏ä„Åå„Å£„Å¶„Çã„Å®„Åç„ÄÇÊ•Ω„Åó„Åù„ÅÜüé§üéµüôå"
    "ÁÑö„ÅçÁÅ´„É¨„Ç¢Áí∞Â¢É" -> "Â§ñ„Åß„Éë„ÉÅ„Éë„ÉÅÈü≥„Å®„Åª„ÅÆ„Åã„Å™ÁÖô„ÅÆÂåÇ„ÅÑ„ÄÇÁÅ´„ÅÆÊ∏©„Åã„Åï„ÇíËøë„Åè„ÅßÊÑü„Åò„Çã„É†„Éº„Éâ„ÄÇüî•üå≤üòå"
    "ÈõªËªä„É©„ÉÉ„Ç∑„É•„É¨„Ç¢Áí∞Â¢É" -> "„Åé„ÇÖ„ÅÜ„Åé„ÇÖ„ÅÜ„ÅßÊöë„Åè„ÄÅÁ©∫Ê∞ó„Åå„Åì„ÇÇ„Çä„Åå„Å°„ÄÇÈÄöÂã§„É©„ÉÉ„Ç∑„É•„ÅÆËªäÂÜÖ„Åù„ÅÆ„ÇÇ„ÅÆ„ÄÇüöÜüë•üí®"
    "Êò†ÁîªÈ§®„É¨„Ç¢Áí∞Â¢É" -> "„Åã„Å™„ÇäÊöó„Åè„Å¶Èùô„Åã„ÄÅ‰∫∫„Åå„Åò„Å£„Å®Â∫ß„Å£„Å¶„ÇãÁ©∫Èñì„ÄÇ‰∏äÊò†‰∏≠„ÅÆÊò†ÁîªÈ§®„ÅÆÈõ∞Âõ≤Ê∞ó„ÄÇüé¨üçøü§´"

    // ===== „Éé„Éº„Éû„É´Áí∞Â¢É =====
    "Èùô„Åã„ÇÅÂø´ÈÅ©Áí∞Â¢É" -> "Á©∫Ê∞ó„ÅØ„Åï„Çâ„Å£„Å®„ÄÅÈü≥„ÅØÊéß„Åà„ÇÅ„ÄÇ„Åä„ÅÜ„Å°„Åß„Å≤„Å®‰ºë„Åø„Åó„Å¶„Çã„Å®„Åç„ÅÆËêΩ„Å°ÁùÄ„Åç„ÄÇüåøüõãÔ∏èü§´"
    "Ê∂º„Åó„ÇÅÊòé„Çã„ÅÑÁí∞Â¢É" -> "„Å≤„Çì„ÇÑ„ÇäÔºÜÊòé„Çã„ÅÑÂ†¥ÊâÄ„ÄÇÊúù„ÅÆ„Ç™„Éï„Ç£„Çπ„ÇÑÊïôÂÆ§„Åø„Åü„ÅÑ„Å™„ÇØ„É™„Ç¢„Å™Á©∫Ê∞óÊÑü„ÄÇ‚ùÑÔ∏èüí°üìé"
    "„Åñ„Çè„Åñ„ÇèÁí∞Â¢É" -> "‰∫∫„ÅÆÂæÄÊù•„ÅåÂ§ö„Åè„Å¶„Ç¨„É§„Ç¨„É§„ÄÇ„Ç∑„Éß„ÉÉ„Éî„É≥„Ç∞„É¢„Éº„É´„ÅÆÈÄöË∑Ø„ÇÑÈßÖ„ÅÆÊßãÂÜÖ„Å£„ÅΩ„ÅÑ„ÄÇüë•üè¨üîâ"
    "Êöó„ÅÑÈùô„ÅãÁí∞Â¢É" -> "Êòé„Åã„Çä„ÇíËêΩ„Å®„Åó„Å¶Èùô„Åã„Å´ÈÅé„Åî„ÅôÊôÇÈñì„ÄÇÂ∞±ÂØùÂâç„ÅÆÂØùÂÆ§„ÇÑ„Ç´„Éº„ÉÜ„É≥„ÇíÈñâ„ÇÅ„ÅüÈÉ®Â±ã„ÄÇüåôüõèÔ∏èü§´"
    "„É™„Éì„É≥„Ç∞„Åæ„Å£„Åü„ÇäÁí∞Â¢É" -> "„ÇΩ„Éï„Ç°„Åß„Å†„Çâ„Å£„Å®„ÄÅ„ÉÜ„É¨„Éì„ÇÑÈü≥Ê•Ω„ÅØÂ∞è„Åï„ÇÅ„ÄÇ„ÅäËå∂„Åß„ÇÇÈ£≤„Åø„Åü„Åè„Å™„ÇãÂ±ÖÂøÉÂú∞„ÄÇüõãÔ∏èüì∫‚òï"
    "‰∫§ÈÄöÈáèÂ§ö„ÇÅÁí∞Â¢É" -> "Ëªä„ÅÆÊµÅ„Çå„Çí„Åö„Å£„Å®ÊÑü„Åò„Çã„Çà„ÅÜ„Å™Â†¥ÊâÄ„ÄÇÂ§ßÈÄö„ÇäÊ≤ø„ÅÑ„ÅßÊôÇ„ÄÖ„ÇØ„É©„ÇØ„Ç∑„Éß„É≥„ÇÇüöóüõ£Ô∏èüí®"
    "Êó©Êúù„ÅÆÈùô„Åë„ÅïÁí∞Â¢É" -> "Â§úÊòé„ÅëÂâçÂæå„ÅÆ„Å≤„Å£„Åù„ÇäÊÑü„ÄÇÂ§ñ„ÅØ„Åæ„Å†ËñÑÊöó„Åè„ÄÅÈü≥„ÇÇÂ∞ë„Å™„ÇÅ„ÄÇüåÖüå´Ô∏èüïäÔ∏è"
    "Ë™øÁêÜ‰∏≠„Å£„ÅΩ„ÅÑÁí∞Â¢É" -> "„Ç≠„ÉÉ„ÉÅ„É≥„ÅßÊπØÊ∞ó„ÇÑÈ¶ô„Çä„Åå„Åµ„Çè„Å£„Å®„ÄÇÁÇí„ÇÅÁâ©„ÅÆÈü≥„ÇÑÊèõÊ∞óÊâá„ÅÆÊ∞óÈÖç„Åå„ÅÇ„Çã„Å®Ëøë„ÅÑ„Çà„ÄÇüç≥üî•üßÖ"

    // ===== „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ =====
    else -> "‚ÄúÁ©∫Ê∞ó„ÅÆÈõ∞Âõ≤Ê∞ó‚Äù„Å´Ê≥®ÁõÆ„Åó„Çà„ÅÜ„ÄÇÊòé„Çã„Åï„ÉªÈùô„Åã„Åï„Éª‰∫∫„ÅÆÂ§ö„Åï„ÉªÊèõÊ∞ó„ÅÆÂäπ„ÅçÂÖ∑Âêà„ÇíÊÑü„ÅòÂèñ„Çã„Å®Ë¶ã„Å§„Åë„ÇÑ„Åô„ÅÑ„Çà„ÄÇüå¨Ô∏èüëÄ"
}

/* =============== Utils =============== */

private fun formatTs(ts: Long): String =
    SimpleDateFormat("yyyy/MM/dd HH:mm", Locale.getDefault()).format(Date(ts))